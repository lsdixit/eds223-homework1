---
title: "ej_screen"
format: html
editor_options: 
  chunk_output_type: console
---

# Exploring Environmental (in)justice

The United States Environmental Protection Agency defines Environmental Justice as "the just treatment and meaningful involvement of all people, regardless of income, race, color, national origin, Tribal affiliation, or disability". In this project, I will be exploring particulate pollution in California and exploring which groups might be disproportionately affected by poor air quality. 

Step 1: Load in necessary packages.
```{r}
rm(list = ls())
library(tidyverse)
library(sf)
library(here)
library(tmap)
```

Step 2: Read in environmental justice data and clean for mapping.
```{r}
# read in geodatabase of EJScreen data at the Census Block Group level
ejscreen <- sf::st_read(here::here("data", "data", "ejscreen","EJSCREEN_2023_BG_StatePct_with_AS_CNMI_GU_VI.gdb")) 

# filter to California only
california <- ejscreen %>%
  dplyr::filter(ST_ABBREV == "CA") %>% 
  drop_na(c("P_D2_CANCER", "P_PTRAF", "LIFEEXPPCT"))

# calculate the mean for each EJ variable, by county
ca_counties <- aggregate(california, by = list(california$CNTY_NAME), FUN = mean)

# separate the county names into name and county, and remove the "county" string
ca_counties <- separate(ca_counties, Group.1, 
                        into = c("county", "county_name"), sep = " ")
ca_counties <- select(ca_counties, -c("county_name"))
```

Step 3: Map 1
The map below represents the estimated lifetime inhalation cancer risk as a result of carcinogens present in the air. This value is persons per million over a 70-year lifetime. EJScreen presents these data as a percentile for better comparison.
```{r}
# percentile of airborne toxics that can lead to cancer, by county in California
tm_shape(ca_counties) +
  tm_polygons(fill = "P_D2_CANCER",
              fill.legend = tm_legend(title = "Lifetime Cancer Risk Percentile",
                                      orientation = "landscape",
                                      position = tm_pos_out("center", "bottom"), frame = FALSE),
              fill.scale = tm_scale(labels = c("Below 19th", "20th to 39th", "40th to 59th", "60th to 80th"))) +
  tm_title("Lifetime cancer risk via inhalation of toxins, by county", 
           frame = FALSE,
           size = 1) +
  tm_scalebar(position = "right") +
  tm_compass(position = c("left", "bottom"))

```
The counties of the central valley (San Joaquin Valley) are generally in a higher percentile for cancer risk via inhalation of airborne toxins. There could be a few potential causes of increased carcinogens in outside air:

- I-5 and Highway 99 introduce pollution sources, such as diesel locomotives.
- Fine particulate matter (PM2.5) 
- Topography from surrounding mountains create a "bowl", trapping these pollutants.

We will look closer into a few of these high risk counties to look at further risk factors such as PM2.5 and diesel particulates, both of which contribute to inhalation risks.

```{r}
# zoom in on a few higher risk counties from the cancer index to look at things like PM2.5, diesel, and further demographic information

# sort them and choose top 3
ca_counties %>% 
  select(county, P_D2_CANCER) %>% 
  arrange(desc(P_D2_CANCER))
# In order: Sacramento, Tulare, Yuba Counties

# subset full data set for top 3
top3 <- c("Sacramento County", "Tulare County", "Yuba County")
top3_county <- california %>% 
  filter(CNTY_NAME %in% top3)

top3_sac <- california %>% 
  filter(CNTY_NAME == "Sacramento County")
top3_tul <- california %>% 
  filter(CNTY_NAME == "Tulare County")
top3_yub <- california %>% 
  filter(CNTY_NAME == "Yuba County")
```

```{r}
# County maps of cancer risk
tm_shape(top3_county) +
  tm_polygons(fill = "P_D2_CANCER") +
  tm_facets("CNTY_NAME")

```

```{r}
# county maps of diesel particulate matter
tm_shape(top3_county) +
  tm_polygons(fill = "P_D2_DSLPM") +
  tm_facets("CNTY_NAME")
```

```{r}
# county maps of PM2.5

```

```{r}
# All three variables just for Sacramento County
tm_shape(top3_sac) +
  tm_polygons(fill = c("P_D2_CANCER", "P_D2_DSLPM", "P_D2_PM25"),
              fill.scale = 
      list(tm_scale_intervals(values = "-brewer.reds"),
         tm_scale_intervals(values = "brewer.purples"),
         tm_scale_intervals(values = "brewer.blues")))
```

